.TH "InotifyEvent" 3 "4 Sep 2006" "Version 0.1.0" "inotify-cxx" \" -*- nroff -*-
.ad l
.nh
.SH NAME
InotifyEvent \- inotify event class  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <inotify-cxx.h>\fP
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBInotifyEvent\fP ()"
.br
.RI "\fIConstructor. \fP"
.ti -1c
.RI "\fBInotifyEvent\fP (const struct inotify_event *pEvt)"
.br
.RI "\fIConstructor. \fP"
.ti -1c
.RI "\fB~InotifyEvent\fP ()"
.br
.RI "\fIDestructor. \fP"
.ti -1c
.RI "int32_t \fBGetDescriptor\fP () const "
.br
.RI "\fIReturns the event watch descriptor. \fP"
.ti -1c
.RI "uint32_t \fBGetMask\fP () const "
.br
.RI "\fIReturns the event mask. \fP"
.ti -1c
.RI "bool \fBIsType\fP (uint32_t uType) const "
.br
.RI "\fIChecks for the event type. \fP"
.ti -1c
.RI "uint32_t \fBGetCookie\fP () const "
.br
.RI "\fIReturns the event cookie. \fP"
.ti -1c
.RI "uint32_t \fBGetLength\fP () const "
.br
.RI "\fIReturns the event name length. \fP"
.ti -1c
.RI "const std::string & \fBGetName\fP () const "
.br
.RI "\fIReturns the event name. \fP"
.ti -1c
.RI "void \fBGetName\fP (std::string &rName) const "
.br
.RI "\fIExtracts the event name. \fP"
.ti -1c
.RI "void \fBGetData\fP (struct inotify_event *pEvt)"
.br
.RI "\fIReturns the event raw data. \fP"
.ti -1c
.RI "void \fBGetData\fP (struct inotify_event &rEvt)"
.br
.RI "\fIReturns the event raw data. \fP"
.ti -1c
.RI "void \fBDumpTypes\fP (std::string &rStr) const "
.br
.RI "\fIFills the string with all types contained in the event mask. \fP"
.in -1c
.SH "Detailed Description"
.PP 
inotify event class 

It holds all information about inotify event and provides access to its particular values.
.PP
.SH "Constructor & Destructor Documentation"
.PP 
.SS "InotifyEvent::InotifyEvent ()\fC [inline]\fP"
.PP
Constructor. 
.PP
Creates a plain event.
.SS "InotifyEvent::InotifyEvent (const struct inotify_event * pEvt)\fC [inline]\fP"
.PP
Constructor. 
.PP
Creates an event based on inotify event data. For NULL pointer it works the same way as \fBInotifyEvent()\fP.
.PP
\fBParameters:\fP
.RS 4
\fIpEvt\fP event data
.RE
.PP

.SS "InotifyEvent::~InotifyEvent ()\fC [inline]\fP"
.PP
Destructor. 
.PP
.SH "Member Function Documentation"
.PP 
.SS "void InotifyEvent::DumpTypes (std::string & rStr) const"
.PP
Fills the string with all types contained in the event mask. 
.PP
\fBParameters:\fP
.RS 4
\fIrStr\fP dumped event types
.RE
.PP

.SS "uint32_t InotifyEvent::GetCookie () const\fC [inline]\fP"
.PP
Returns the event cookie. 
.PP
\fBReturns:\fP
.RS 4
event cookie
.RE
.PP

.SS "void InotifyEvent::GetData (struct inotify_event & rEvt)\fC [inline]\fP"
.PP
Returns the event raw data. 
.PP
\fBParameters:\fP
.RS 4
\fIrEvt\fP event data
.RE
.PP

.SS "void InotifyEvent::GetData (struct inotify_event * pEvt)\fC [inline]\fP"
.PP
Returns the event raw data. 
.PP
For NULL pointer it does nothing.
.PP
\fBParameters:\fP
.RS 4
\fIpEvt\fP event data
.RE
.PP

.SS "int32_t InotifyEvent::GetDescriptor () const\fC [inline]\fP"
.PP
Returns the event watch descriptor. 
.PP
\fBReturns:\fP
.RS 4
watch descriptor
.RE
.PP
\fBSee also:\fP
.RS 4
\fBInotifyWatch::GetDescriptor()\fP
.RE
.PP

.SS "uint32_t InotifyEvent::GetLength () const\fC [inline]\fP"
.PP
Returns the event name length. 
.PP
\fBReturns:\fP
.RS 4
event name length
.RE
.PP

.SS "uint32_t InotifyEvent::GetMask () const\fC [inline]\fP"
.PP
Returns the event mask. 
.PP
\fBReturns:\fP
.RS 4
event mask
.RE
.PP
\fBSee also:\fP
.RS 4
\fBInotifyWatch::GetMask()\fP
.RE
.PP

.SS "void InotifyEvent::GetName (std::string & rName) const\fC [inline]\fP"
.PP
Extracts the event name. 
.PP
\fBParameters:\fP
.RS 4
\fIrName\fP event name
.RE
.PP

.SS "const std::string& InotifyEvent::GetName () const\fC [inline]\fP"
.PP
Returns the event name. 
.PP
\fBReturns:\fP
.RS 4
event name
.RE
.PP

.SS "bool InotifyEvent::IsType (uint32_t uType) const\fC [inline]\fP"
.PP
Checks for the event type. 
.PP
\fBParameters:\fP
.RS 4
\fIuType\fP type which is checked for 
.RE
.PP
\fBReturns:\fP
.RS 4
true = event mask contains the given type, false = otherwise
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for inotify-cxx from the source code.
